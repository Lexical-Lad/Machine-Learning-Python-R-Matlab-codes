a = matrix(c(1,2,3,4,5,6), nrow = 2, ncol = 3, byrow = FALSE)
a
y = runif(10, min = 1, max = 100)
y
y
runif(20, min = 1, max = 100)
rand = runif(20, min = 1, max = 100)
rand
min(rand)
max(rand)
mean(rand)
sd(rand)
head(rand)
tail(rand)
a = runif(20, min = 1, max = 100)
a
write.csv(data.frame(a,rand), file = "data.csv")
cd
dir
cwd
cd
cd ;
getwd
getwd()
setwd(getwd()+"/R")
setwd("~/R")
getwd()
write.csv(data.frame(a,rand), file = "data.csv")
print("dfsgdfg")
printf("dfsgdfg")
dataset = read.csv("data.csv")
dataset
write.csv(data.frame(a,rand), file = "data.csv", row.names = FALSE)
dataset = read.csv("data.csv")
dataset
plot(a,rand, main = "Plotting and stuff", xlab = "a", ylab = "rand")
png(filename = "R1.png")
;
close
close()
plot.close()
dev.off()
plot(a,rand, main = "Plotting and stuff", xlab = "a", ylab = "rand")
plot(a,rand, main = "Plotting and stuff!", xlab = "a", ylab = "rand")
plot(a,rand, main = "Plotting and stuff", xlab = "a", ylab = "rand")
png(filename = "R1.png")
dev.off();
png(filename = "R1.png")
plot(a,rand, main = "Plotting and stuff", xlab = "a", ylab = "rand")
dev.off()
y = runif(20, min = 1, max = 100)
png("plot.png")
plot(a,y,main = "Plotting with R", xlab = "a", ylab = "y")
dev.off();
X = rand(20)
X = runif(20)
Y = runif(20, min =10, max = 100)
X
T
Y
z = list(x = X, y = Y)
z
plot(z)
png("z.png")
plot(z)
dev.off()
png("zs.png")
plot(z, type = "s")
dev.off()
ls()
rm(list=ls())
help c
help  c()
c
a = c("fuck", 10)
a
vec = c(1,2,3,4,5)
vec
bleh = c("A", "B", 42)
bleh
vec[2]
vec[3]
vec[-2]
vec[-2] #displays all the elements of vector 'vec' except that at index 2
vec[c(1,3)]
vec[c(1,4)]
rep(vec)
rep(vec, 4)
rep(vec, each = 4)
rep(vec, times = (1,2,3,4,5))
rep(vec, times = c(1,2,3,4,5))
seq(2,3,by = 0.1)
bleh = read.csv("data.csv")
bleh
type(bleh)
typeof(bleh)
class(bleh)
sample(100,10)
height = 10 +sample(10,10)
height
length = sample(100,10)
write.csv(data.frame(length, height), file = "data.csv")
dataset <- read.csv("data.csv")
dataset
data1 <-  subset(dataset, height > 12)
data1
data2 <- subset(dataset, height > 12 | length < 50)
data2
data2 <- subset(dataset, height > 12 / length < 50)
data2 <- subset(dataset, (height > 12) / (length < 50)
)
data2 <- subset(dataset, (height > 12) / (length < 50))
data2 <- subset(dataset, (height > 12) | (length < 50))
data2
data2 <- subset(dataset, (height > 12) & (length < 50))
data2
data1 <- subset(dataset, height > 12)
data1
dataset
newdata <- data.frame(height = C(13, 19), length = c(47, 60))
newdata <- data.frame(height = c(13, 19), length = c(47, 60))
newdata
rbind(dataset,newdata)
newdata <- data.frame(X = c(11,99)height = c(13, 19), length = c(47, 60))
newdata <- data.frame(X = c(11,99),height = c(13, 19), length = c(47, 60))
newdata
rbind(dataset, newdata)
newdata <- data.frame(X = c(11,99)height = c(13, 19), length = c(47, 60))
newdata <- data.frame(X = c(11,99),height = c(13, 19), length = c(47, 60))
rbind(dataset, newdata)
a = rnorm(n=20, mean =50, sd=10)
a
b = transform(dataset, logheight = log(height))
b
a = c(1,2,3)
b = c(2,4,6)
a/b
i
trans = tranform(dataset, logheight = log(height))
trans = transform(dataset, logheight = log(height))
trans
help(library)
library(MASS)
dataset(cherry)
help dataset()
help(dataset)
data(cherry)
help(summary)
data(trees)
trees
cherry<- data(trees)
write.csv(cherry,file = "cherry.csv", row.name = FALSE)
write.csv(cherry,file = "cherry.csv", row.names = FALSE)
cherry
trees
write.csv(trees,file = "cherry.csv", row.names = FALSE)
cherry<-trees
cherry
help(lm)
help(abline)
plot ( cherry$girth, cherry$Volume)
plot ( cherry$Girth, cherry$Volume)
plot ( ,cherry$Volume,cherry$Girth)
plot ( cherry$Volume,cherry$Girth)
dev.off();
plot(cherry$Girth, cherry$Volume)
linreg <- lm(Volume ~ Girth, data = cherry)
abline(linreg)
linreg
help(par)
plot(linreg)
par(mfrow = c(2,2))
dev.off()
par(mfrow = c(2,2))
plot(linreg)
> plot(cherry$Girth, cherry$Volume)
> linreg <- lm(Volume ~ Girth, data = cherry)
> abline(linreg)
> plot(cherry$Girth, cherry$Volume)
plot(cherry$Girth, cherry$Volume)
linreg <- lm(Volume~Girth, data = cherry)
abline(linreg)
estimate
linreg.res
linreg
resid(linreg)
plot(fitted(linreg),residuals(linreg))
save.image()
save.image("whatever.Rdata")
load.image("whatever.Rdata")
load.image("whatever")
load.image()
load("whatever.rdata\)
load("whatever.rdata)
)
""
"
"
sdffgvc
xcv
xcv
z
fcdf
bs
fcdf""
)
;
;
;
;
getwd()
load("whatever.rdata")
rm(list = ls())
load("whatever.rdata")
par(mfrow = c(2,2))
plot(linreg)
dev.off()
rm(list = ls())
library(MASS)
data(cats)
cats
cats(Bwt)
cats.Bwt
cats
cats[Bwt]
cats["Bwt"
]
plot(cats$Bwt, cats$Hwt)
males  = subset(cats, Sex == "M")
males
linreg1 = lm(Hwt ~ Bwt, data =males)
linreg1
abline(linreg1)
linreg1
View(cats)
View(males)
predict(linreg, data.frame(Bwt= seq(from = 2, to = 3.9, by = 0.1)))
predict(linreg1, data.frame(Bwt= seq(from = 2, to = 3.9, by = 0.1)))
predicted = predict(linreg1, data.frame(Bwt= seq(from = 2, to = 3.9, by = 0.1)))
predicted
data("trees")
trees
write.csv(data.frame(trees),file = "cherry.csv", row.names=FALSE)
cherry = read.csv("cherry.csv")
plot(cherry$Girth, cherry$Volume)
lm(Volume~Girth, data = cherry)
linreg = lm(Volume~Girth,cherry)
abline(linreg)
plot(fitted(linreg), residuals(linreg), xlab = "fitted", ylab = "residuals", main = "Something")
abline(h=0)
par(mfrow=c(2,2))
plot(fitted(linreg),rstandard(linreg))
abline(h=0)
qqnorm(rstandard((linreg)))
abline(0,1)
View(cherry)
cherry(,-2)
cherry
cherry[,-2]
library("datasets", lib.loc="C:/Program Files/R/R-3.4.1/library")
BJsales
dataset = BJsales
install.packages("WarbleR")
y
install.packages('WarbleR')
library(caTools)
library(warbleR)
library(randomForest)
#~~~~~~~~~~~~~~~~~~~~~Training the model on the 'voice.csv.' dataset~~~~~~~~~~~~~~~~~~~~~#
dataset <- read.csv("voice.csv")
dataset <- dataset[, !names(dataset) %in% c('mode'), drop = F]
split <- sample.split(dataset$label, SplitRatio = 0.8)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
model <- randomForest(label~., training_set,importance = TRUE)
train_prediction <- predict(model, training_set)
test_prediction <- predict(model, test_set)
check <- train_prediction == training_set$label
training_accuracy <- length(check)/nrow(training_set)
check <- test_prediction == test_set$label
test_accuracy <- length(check)/nrow(test_set)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~Extracting features from sample audio file~~~~~~~~~~~~~~~~~~~~~~~#
#test <-readWave("test.wav")
#ad <-autodetec()
data <- data.frame()
list <- list.files(".", '\\.wav')
for (fileName in list) {
row <- data.frame(fileName, 0, 0, 20)
data <- rbind(data, row)
}
# Set column names.
names(data) <- c('sound.files', 'selec', 'start', 'end')
#ad <- autodetec(data)
features <- specan(data)
features <- features[,4:27]
remove <- c("entropy", "time.ent","time.median","time.Q25","time.Q75","time.IQR")
f <- features [, !names(features) %in% remove, drop = FALSE ]
names(f)[names(f) == 'freq.median'] <- 'median'
names(f)[names(f) == 'freq.Q25'] <- 'Q25'
names(f)[names(f) == 'freq.Q75'] <- 'Q75'
names(f)[names(f) == 'freq.IQR'] <- 'IQR'
f['centroid'] <- f['meanfreq']
#f['mode'] <- 0
features<-f
library(caTools)
library(warbleR)
library(randomForest)
library(tuneR)
library(seewave)
library(caTools)
library(randomForest)
library(warbleR)
library(seewave)
library(tuneR)
#~~~~~~~~~~~~~~~~~~~~~Training the model on the 'voice.csv.' dataset~~~~~~~~~~~~~~~~~~~~~#
dataset <- read.csv("voice2.csv")
dataset<- dataset[,2:29]
split <- sample.split(dataset$label, SplitRatio = 0.8)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
model <- randomForest(label~., dataset, importance = TRUE)
train_prediction <- predict(model, training_set)
test_prediction <- predict(model, test_set)
test_labels <- table(test_set$label, test_prediction)
table(test_set$label, test_prediction)
#~~~~~~~~~~~~~~Extracting features from sample audio file~~~~~~~~~~~~~~~~~~~~~~~#
data <- data.frame()
# Get list of files in the folder.
list <- list.files(".", '\\.wav')
# Adding file list to data.frame for processing.
for (fileName in list) {
row <- data.frame(fileName, 0, 0, 20)
data <- rbind(data, row)
}
# Setting column names.
names(data) <- c('sound.files', 'selec', 'start', 'end')
features <- specan(data)
features <- features[,4:30]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Final Prediciton~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
prediction <- predict(model, features)
output<- data.frame("Audio File" = list, "Prediction/Label" = prediction)
View(output)
setwd("C:/Users/Samuel/Desktop/VoiceGender")
library(caTools)
library(randomForest)
library(warbleR)
library(seewave)
library(tuneR)
#~~~~~~~~~~~~~~~~~~~~~Training the model on the 'voice.csv.' dataset~~~~~~~~~~~~~~~~~~~~~#
dataset <- read.csv("voice2.csv")
dataset<- dataset[,2:29]
split <- sample.split(dataset$label, SplitRatio = 0.8)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
model <- randomForest(label~., dataset, importance = TRUE)
train_prediction <- predict(model, training_set)
test_prediction <- predict(model, test_set)
test_labels <- table(test_set$label, test_prediction)
table(test_set$label, test_prediction)
#~~~~~~~~~~~~~~Extracting features from sample audio file~~~~~~~~~~~~~~~~~~~~~~~#
data <- data.frame()
# Get list of files in the folder.
list <- list.files(".", '\\.wav')
# Adding file list to data.frame for processing.
for (fileName in list) {
row <- data.frame(fileName, 0, 0, 20)
data <- rbind(data, row)
}
# Setting column names.
names(data) <- c('sound.files', 'selec', 'start', 'end')
features <- specan(data)
features <- features[,4:30]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Final Prediciton~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
prediction <- predict(model, features)
output<- data.frame("Audio File" = list, "Prediction/Label" = prediction)
View(output)
View(features)
View(features)
library(caTools)
library(randomForest)
library(warbleR)
library(seewave)
library(tuneR)
#~~~~~~~~~~~~~~~~~~~~~Training the model on the 'voice.csv.' dataset~~~~~~~~~~~~~~~~~~~~~#
dataset <- read.csv("voice2.csv")
dataset<- dataset[,2:29]
split <- sample.split(dataset$label, SplitRatio = 0.8)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
model <- randomForest(label~., dataset, importance = TRUE)
train_prediction <- predict(model, training_set)
test_prediction <- predict(model, test_set)
test_labels <- table(test_set$label, test_prediction)
table(test_set$label, test_prediction)
#~~~~~~~~~~~~~~Extracting features from sample audio file~~~~~~~~~~~~~~~~~~~~~~~#
data <- data.frame()
# Get list of files in the folder.
list <- list.files(".", '\\.wav')
# Adding file list to data.frame for processing.
for (fileName in list) {
row <- data.frame(fileName, 0, 0, 20)
data <- rbind(data, row)
}
# Setting column names.
names(data) <- c('sound.files', 'selec', 'start', 'end')
features <- specan(data)
features <- features[,4:30]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Final Prediciton~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
prediction <- predict(model, features)
output<- data.frame("Audio File" = list, "Prediction/Label" = prediction)
View(output)
library(caTools)
library(randomForest)
library(warbleR)
library(seewave)
library(tuneR)
#~~~~~~~~~~~~~~~~~~~~~Training the model on the 'voice.csv.' dataset~~~~~~~~~~~~~~~~~~~~~#
dataset <- read.csv("voice2.csv")
dataset<- dataset[,2:29]
split <- sample.split(dataset$label, SplitRatio = 0.8)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
model <- randomForest(label~., dataset, importance = TRUE)
train_prediction <- predict(model, training_set)
test_prediction <- predict(model, test_set)
test_labels <- table(test_set$label, test_prediction)
table(test_set$label, test_prediction)
#~~~~~~~~~~~~~~Extracting features from sample audio file~~~~~~~~~~~~~~~~~~~~~~~#
data <- data.frame()
# Get list of files in the folder.
list <- list.files(".", '\\.wav')
# Adding file list to data.frame for processing.
for (fileName in list) {
row <- data.frame(fileName, 0, 0, 20)
data <- rbind(data, row)
}
# Setting column names.
names(data) <- c('sound.files', 'selec', 'start', 'end')
features <- specan(data)
features <- features[,4:30]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Final Prediciton~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
prediction <- predict(model, features)
output<- data.frame("Audio File" = list, "Prediction/Label" = prediction)
View(output)
library(caTools)
library(randomForest)
library(warbleR)
library(seewave)
library(tuneR)
#~~~~~~~~~~~~~~~~~~~~~Training the model on the 'voice.csv.' dataset~~~~~~~~~~~~~~~~~~~~~#
dataset <- read.csv("voice2.csv")
dataset<- dataset[,2:29]
split <- sample.split(dataset$label, SplitRatio = 0.8)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
#model <- randomForest(label~., dataset, importance = TRUE)
model <- svm
train_prediction <- predict(model, training_set)
test_prediction <- predict(model, test_set)
test_labels <- table(test_set$label, test_prediction)
table(test_set$label, test_prediction)
#~~~~~~~~~~~~~~Extracting features from sample audio file~~~~~~~~~~~~~~~~~~~~~~~#
data <- data.frame()
# Get list of files in the folder.
list <- list.files(".", '\\.wav')
# Adding file list to data.frame for processing.
for (fileName in list) {
row <- data.frame(fileName, 0, 0, 20)
data <- rbind(data, row)
}
# Setting column names.
names(data) <- c('sound.files', 'selec', 'start', 'end')
features <- specan(data)
features <- features[,4:30]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Final Prediciton~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
prediction <- predict(model, features)
output<- data.frame("Audio File" = list, "Prediction/Label" = prediction)
View(output)
library(caTools)
library(randomForest)
library(warbleR)
library(seewave)
library(tuneR)
#~~~~~~~~~~~~~~~~~~~~~Training the model on the 'voice.csv.' dataset~~~~~~~~~~~~~~~~~~~~~#
dataset <- read.csv("voice2.csv")
dataset<- dataset[,2:29]
split <- sample.split(dataset$label, SplitRatio = 0.8)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
model <- randomForest(label~., dataset, importance = TRUE)
train_prediction <- predict(model, training_set)
test_prediction <- predict(model, test_set)
test_labels <- table(test_set$label, test_prediction)
table(test_set$label, test_prediction)
#~~~~~~~~~~~~~~Extracting features from sample audio file~~~~~~~~~~~~~~~~~~~~~~~#
data <- data.frame()
# Get list of files in the folder.
list <- list.files(".", '\\.wav')
# Adding file list to data.frame for processing.
for (fileName in list) {
row <- data.frame(fileName, 0, 0, 20)
data <- rbind(data, row)
}
# Setting column names.
names(data) <- c('sound.files', 'selec', 'start', 'end')
features <- specan(data)
features <- features[,4:30]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Final Prediciton~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
prediction <- predict(model, features)
output<- data.frame("Audio File" = list, "Prediction/Label" = prediction)
View(output)
